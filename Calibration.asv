% This will be used for calibrating the rotational 
% ratemeter. 
% Update: December 20, 2011:  This calibration file is updated so that it
% also contains the ability to make a fit for zeroing the data.  
clear; clc

%% Load data from definition file
run('C:\Users\Ben\Dropbox\BiteBlock\Calibrations\Calibration_20111024\Cal_20111024_def.m'); 



%% Calculate amp, DC, phase
for i = 1:3 % roll, pitch, yaw
    for j = 1:length(cal_data) % number of runs
        % Get initial guess for phase, amp, DC
        numCycles(i,j) = floor(length(cal_data{i,j}) / omega_init);
        for k = 1:numCycles(i,j)
            cycle = cal_data{i,j}( (1 + (k - 1) * omega_init):(1 + k * omega_init));
            maxes{i,j}(k) = max(cycle);
            mins{i,j}(k) = min(cycle);
            amp{i,j}(k) = abs((maxes{i,j}(k) - mins{i,j}(k)) / 2);
            DC{i,j}(k) = (maxes{i,j}(k) + mins{i,j}(k)) / 2;
            phase{i,j}(k) = find(cycle == maxes{i,j}(k), 1, 'first') - omega_init/4;
            % use the location of the first max to
            % generate a guess for the phase.
            % First max should occur 1/4 of the way
            % through the cycle.
        end
        amp_avg(i,j) = mean(amp{i,j});
        DC_avg(i,j) = mean(DC{i,j});
        phase_avg(i,j) = mean(phase{i,j});
        omega(i,j) = omega_init;
        
        % make one array with the various numbers
        % for fitting with fminsearch
        constants(i,j,:) = [amp_avg(i,j) DC_avg(i,j) phase_avg(i,j) omega(i,j)];
        
        % Do least-squares optimization
        if Freqs(j) ~= 0 %fit movement with sine curve
            coeffs = constants(i,j,:);
            X = 1:length(cal_data{i,j});
            Y = cal_data{i,j};
            Y = Y';
            coeffs_opt(i,j, 1:4) = fminsearch(@cal_sine, coeffs, [],  X, Y);
        elseif Freqs(j) == 0 % measure DC component directly
            coeffs_opt(i,j,1) = 0; % set amplitude of motion to 0
            coeffs_opt(i,j,2) = mean(cal_data{i,j}); 
        end
        
        %{
    % optional plotting
    subplot(3,7,i);
    plot(X,Y,X, coeffs_opt(i,2)+ coeffs_opt(i,1) * sin((coeffs_opt(i,3) + X) * 2 * pi / coeffs_opt(i,4)));
    legend('data', 'fit')
        %}
    end
end

% Calculate and save calibrations
x_vec = Freqs; 
num_measurements = length(Freqs); 
for i = 1:3
    fit(i,:) = polyfit(x_vec, abs(coeffs_opt((1 + num_measurements * (i - 1)) : (num_measurements * i), 1))', 1); % take abs value of amplitude
    amp_fit(i) = fit(i,1);  %  amp
    DC_fit(i) = mean(coeffs_opt((1 + num_measurements * (i - 1)) : (num_measurements * i), 2)');  % roll DC
end

save(strcat(Calib_Name, '.mat'), 'amp_fit', 'DC_fit')


% plot the fit for visual verification

for i = 1:3
    fitted_line = fit(i,2) + x_vec * fit(i,1); 
    figure; 
    plot(x_vec, fitted_line, x_vec, abs(coeffs_opt((1 + num_measurements * (i - 1)) : (num_measurements * i), 1))')
    legend('data', 'fit')
end



